EXAMPLE_STD_INSTRUCTIONS = [
    "add &r0, &r0",
    "add &r0, [&r0]",
    "add &r0, 0x00",
    "add &r0, *0x00",
    "add &r0, *TestVar",
    "add [&r0], &r0",
    "add [&r0], [&r0]",
    "add [&r0], 0x00",
    "add [&r0], *0x00",
    "add [&r0], *TestVar",
    "add *0x00, &r0",
    "add *TestVar, &r0",
    "add *0x00, [&r0]",
    "add *TestVar, [&r0]",
    "add *0x00, 0x00",
    "add *TestVar, 0x00",
    "add *0x00, *0x00",
    "add *TestVar, *TestVar",
    "sub &r0, &r0",
    "sub &r0, [&r0]",
    "sub &r0, 0x00",
    "sub &r0, *TestVar",
    "sub &r0, *0x00",
    "sub [&r0], &r0",
    "sub [&r0], [&r0]",
    "sub [&r0], 0x00",
    "sub [&r0], *TestVar",
    "sub [&r0], *0x00",
    "sub *TestVar, &r0",
    "sub *0x00, &r0",
    "sub *TestVar, [&r0]",
    "sub *0x00, [&r0]",
    "sub *TestVar, 0x00",
    "sub *0x00, 0x00",
    "sub *TestVar, *TestVar",
    "sub *0x00, *0x00",
    "mul &r0, &r0",
    "mul &r0, [&r0]",
    "mul &r0, 0x00",
    "mul &r0, *TestVar",
    "mul &r0, *0x00",
    "mul [&r0], &r0",
    "mul [&r0], [&r0]",
    "mul [&r0], 0x00",
    "mul [&r0], *TestVar",
    "mul [&r0], *0x00",
    "mul *TestVar, &r0",
    "mul *0x00, &r0",
    "mul *TestVar, [&r0]",
    "mul *0x00, [&r0]",
    "mul *TestVar, 0x00",
    "mul *0x00, 0x00",
    "mul *TestVar, *TestVar",
    "mul *0x00, *0x00",
    "div &r0, &r0",
    "div &r0, [&r0]",
    "div &r0, 0x00",
    "div &r0, *TestVar",
    "div &r0, *0x00",
    "div [&r0], &r0",
    "div [&r0], [&r0]",
    "div [&r0], 0x00",
    "div [&r0], *TestVar",
    "div [&r0], *0x00",
    "div *TestVar, &r0",
    "div *0x00, &r0",
    "div *TestVar, [&r0]",
    "div *0x00, [&r0]",
    "div *TestVar, 0x00",
    "div *0x00, 0x00",
    "div *TestVar, *TestVar",
    "div *0x00, *0x00",
    "xor &r0, &r0",
    "xor &r0, [&r0]",
    "xor &r0, 0x00",
    "xor &r0, *TestVar",
    "xor &r0, *0x00",
    "xor [&r0], &r0",
    "xor [&r0], [&r0]",
    "xor [&r0], 0x00",
    "xor [&r0], *TestVar",
    "xor [&r0], *0x00",
    "xor *TestVar, &r0",
    "xor *0x00, &r0",
    "xor *TestVar, [&r0]",
    "xor *0x00, [&r0]",
    "xor *TestVar, 0x00",
    "xor *0x00, 0x00",
    "xor *TestVar, *TestVar",
    "xor *0x00, *0x00",
    "and &r0, &r0",
    "and &r0, [&r0]",
    "and &r0, 0x00",
    "and &r0, *TestVar",
    "and &r0, *0x00",
    "and [&r0], &r0",
    "and [&r0], [&r0]",
    "and [&r0], 0x00",
    "and [&r0], *TestVar",
    "and [&r0], *0x00",
    "and *TestVar, &r0",
    "and *0x00, &r0",
    "and *TestVar, [&r0]",
    "and *0x00, [&r0]",
    "and *TestVar, 0x00",
    "and *0x00, 0x00",
    "and *TestVar, *TestVar",
    "and *0x00, *0x00",
    "not &r0",
    "not [&r0]",
    "not *TestVar",
    "not *0x00",
    "or &r0, &r0",
    "or &r0, [&r0]",
    "or &r0, 0x00",
    "or &r0, *TestVar",
    "or &r0, *0x00",
    "or [&r0], &r0",
    "or [&r0], [&r0]",
    "or [&r0], 0x00",
    "or [&r0], *TestVar",
    "or [&r0], *0x00",
    "or *TestVar, &r0",
    "or *0x00, &r0",
    "or *TestVar, [&r0]",
    "or *0x00, [&r0]",
    "or *TestVar, 0x00",
    "or *0x00, 0x00",
    "or *TestVar, *TestVar",
    "or *0x00, *0x00",
    "shr &r0, 0x00",
    "shr [&r0], 0x00",
    "shr *TestVar, 0x00",
    "shr *0x00, 0x00",
    "shl &r0, 0x00",
    "shl [&r0], 0x00",
    "shl *TestVar, 0x00",
    "shl *0x00, 0x00",
    "mov &r0, &r0",
    "mov &r0, [&r0]",
    "mov &r0, 0x00",
    "mov &r0, *TestVar",
    "mov &r0, *0x00",
    "mov [&r0], &r0",
    "mov [&r0], [&r0]",
    "mov [&r0], 0x00",
    "mov [&r0], *TestVar",
    "mov [&r0], *0x00",
    "mov *TestVar, &r0",
    "mov *0x00, &r0",
    "mov *TestVar, [&r0]",
    "mov *0x00, [&r0]",
    "mov *TestVar, 0x00",
    "mov *0x00, 0x00",
    "mov *TestVar, *TestVar",
    "mov *0x00, *0x00",
    "cmp &r0, &r0",
    "cmp &r0, [&r0]",
    "cmp &r0, 0x00",
    "cmp &r0, *TestVar",
    "cmp &r0, *0x00",
    "cmp [&r0], &r0",
    "cmp [&r0], [&r0]",
    "cmp [&r0], 0x00",
    "cmp [&r0], *TestVar",
    "cmp [&r0], *0x00",
    "cmp *TestVar, &r0",
    "cmp *0x00, &r0",
    "cmp *TestVar, [&r0]",
    "cmp *0x00, [&r0]",
    "cmp *TestVar, 0x00",
    "cmp *0x00, 0x00",
    "cmp *TestVar, *TestVar",
    "cmp *0x00, *0x00",
    "jz 0x00",
    "jz ~TestLabel",
    "jnz 0x00",
    "jnz ~TestLabel",
    "je 0x00",
    "je ~TestLabel",
    "jne 0x00",
    "jne ~TestLabel",
    "jl 0x00",
    "jl ~TestLabel",
    "jle 0x00",
    "jle ~TestLabel",
    "jg 0x00",
    "jg ~TestLabel",
    "jge 0x00",
    "jge ~TestLabel",
    "jmp 0x00",
    "jmp ~TestLabel",
    "inc &r0",
    "inc [&r0]",
    "inc 0x00",
    "inc *TestVar",
    "inc *0x00",
    "dec &r0",
    "dec [&r0]",
    "dec 0x00",
    "dec *TestVar",
    "dec *0x00",
    "push &r0",
    "push [&r0]",
    "push 0x00",
    "push *TestVar",
    "push *0x00",
    "pop &r0",
    "pop [&r0]",
    "pop 0x00",
    "pop *TestVar",
    "pop *0x00",
    "call 0x00",
    "call ~TestLabel",
    "ret",
    "nop",
    "halt",
]